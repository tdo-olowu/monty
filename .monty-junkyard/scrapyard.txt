
Basically, what happens if there's only one element in the stack?

void pop_instr(stack_t **stack, unsigned int ln)
{
    stack_t *crnt_node, *prev_node;
    char *err_msg = "L%u: can't pop an empty stack\n";

    printf("about to pop stack...\n");

    if (stack != NULL && *stack != NULL) // Check if stack and *stack are not NULL
    {
        crnt_node = *stack;

        // Check if the stack has only one element
        if (crnt_node->next == NULL)
        {
            free(crnt_node);
            *stack = NULL; // Set the stack to NULL after popping the only element
            printf("stack popped\n");
            return;
        }

        // Iterate to the last node
        while (crnt_node->next != NULL)
            crnt_node = crnt_node->next;

        prev_node = crnt_node->prev;

        if (prev_node != NULL) // Check if prev_node is not NULL before accessing its members
            prev_node->next = NULL;

        free(crnt_node);
        printf("stack popped\n");
    }
    else
    {
        fprintf(stderr, err_msg, ln);
        exit(EXIT_FAILURE);
    }
}





/**
 * read_line - read opcodes
 * @buf: pointer to the input buffer
 * @lenptr: pointer to length of buffer
 * @filestr: filestream pointer.
 * Return: number of bytes read.
 */
ssize_t read_line(char **buf, size_t *lenptr, FILE *filestr)
{
	char ch;
	ssize_t bytes_read = 0;
	size_t i = 0, bufsize = *lenptr;
	(void)bytes_read;

	if (buf == NULL || lenptr == NULL)
	{
		perror("Invalid argument\n");
		return (-1);
	}
	if (*buf == NULL)
	{
		*buf = malloc(bufsize * sizeof(char));
		if (*buf == NULL)
		{
			perror("Couldn't allocate memory");
			exit(EXIT_FAILURE);
		}
	}
	while (((ch = fgetc(filestr)) != EOF) && (ch != '\n'))
	{
		if (i >= bufsize - 1)
		{
			bufsize += bufsize;
			*buf = realloc(*buf, bufsize);
			if (*buf == NULL)
				exit(EXIT_FAILURE);
		}
	}
	(*buf)[i++] = (char)ch;
	(*buf)[i] = '\0';
	*lenptr = bufsize;

	if ((ch == EOF) && (i == 0))
		return (-1);
	return (i);
}

